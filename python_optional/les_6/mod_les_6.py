"""
Задание 1. Модуль для подсчета количества повторений слов
Создайте модуль с функцией, которая получает список слов и возвращает
словарь, в котором ключи — это слова, а значения — количество их повторений
в списке.
"""


def words_count(words:list) -> dict:
    result = dict()
    for word in words:
        if word in result:
            result[word] += 1
        else:
            result[word] = 1
    return result


"""
Задача 2. Модуль для удаления дублирующихся подряд символов
Напишите модуль с функцией, которая принимает строку и возвращает строку с
удаленными дублирующимися подряд идущими символами. Например, строка
"aabbccaa" должна быть преобразована в "abca".
"""

def rem_dup(lines: str) -> str:
    if not lines:
        return lines

    res = [lines[0]]

    for lets in lines[1:]:
        if lets != res[-1]:
            res.append(lets)

    return ''.join(res)


"""
Задача 3. Модуль для нахождения уникальных для обоих списков
элементов
Создайте модуль с функцией, которая принимает два списка и возвращает
список, содержащий только элементы, которые уникальны для обоих списков
"""

def unique_list(x:list, y:list) -> list:
    res_list = list((set(x) - set(y)) | (set(y) - set(x)))

    return res_list


"""
Задача 4. Модуль для проверки даты
Создайте модуль и напишите в нём функцию, которая получает на вход дату в
формате DD.MM.YYYY Функция возвращает истину, если дата может существовать
или ложь, если такая дата невозможна. Для простоты договоримся, что год
может быть в диапазоне [1, 9999]. Весь период (1 января 1 года - 31 декабря 9999
года) действует Григорианский календарь. Проверку года на високосность
вынести в отдельную защищённую функцию
"""

# valid_day = {1: 31, 3: 31, 4: 30, 5: 31, 6: 30,
#             7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}


def _get_day_leap_year(year:int)->int:
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):

        return 29

    return 28


def check_date(date:str)->bool:
    day, month, year = map(int, date.split('.'))
    valid_day = {
        (1, 3, 5, 7, 8, 10, 12): 31,
        (4, 6, 9, 11): 30,
        (2, ): _get_day_leap_year(year)
    }

    if 0 < year <= 9999:
        for key, value in valid_day.items():
            if month in key:
                if 0 < day <= value:

                    return True

                return False

    return False


# Проверяем, что все части являются целыми числами
# day, month, year = map(int, parts)