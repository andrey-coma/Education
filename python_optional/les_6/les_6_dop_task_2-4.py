"""Задание №4
Создайте модуль с функцией внутри.
Функция получает на вход загадку, список с возможными
вариантами отгадок и количество попыток на угадывание.
Программа возвращает номер попытки, с которой была
отгадана загадка или ноль, если попытки исчерпаны."""


_data = {}

def save(puzzle: str, count: int) -> None:
    _data[puzzle] = count


def secrets(puzzle: str, answers: list[str], count: int=3) -> int:
    print('Угадай загадку')
    print(puzzle)
    for i in range(1, count + 1):
        answer = input(f'Попытка {i}, твой ответ: ').lower()
        if answer in answers:

            return i

    return 0


"""
Задание №5
Добавьте в модуль с загадками функцию, которая хранит
словарь списков.
Ключ словаря - загадка, значение - список с отгадками.
Функция в цикле вызывает загадывающую функцию, чтобы
передать ей все свои загадки.
"""

def riddles():
    puzzles = {
        'Зимой и летом одним цветом': ['ель', 'сосна', 'доллар'],
        'Речка спятила с ума — По домам пошла сама.': ['водопровод'],
        'Музыкант, певец, рассказчик — А всего труба да ящик.': ['граммофон']
    }

    for key, value in puzzles.items():
        res = secrets(key, value)
        print(f'Угадал с {res} попытки' if res else 'Не угадал')
        save(key, res)


def show() -> None:
    res = (
        f'Загадку {puzzle} угадал с {count}-й попытки' if count
        else 'Не угадал'
        for puzzle, count in _data.items()
    )
    print(*res, sep='\n')


if __name__ == '__main__':
    riddles()
    show()


"""Задание №6
Добавьте в модуль с загадками функцию, которая
принимает на вход строку (текст загадки) и число (номер
попытки, с которой она угадана).
Функция формирует словарь с информацией о результатах
отгадывания.
Для хранения используйте защищённый словарь уровня
модуля.
Отдельно напишите функцию, которая выводит результаты
угадывания из защищённого словаря в удобном для чтения
виде.
Для формирования результатов используйте генераторное
выражение."""

# Задание выполнено на строках с 11 по 17